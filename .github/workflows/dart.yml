name: Dart CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Install Flutter
        uses: subosito/flutter-action@v2

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze
        run: flutter analyze

      - name: Run Flutter Tests
        run: flutter test --coverage

      - name: Setup LCOV
        uses: hrishikesh-kadam/setup-lcov@v1

      - name: Report Code Coverage
        uses: zgosalvez/github-actions-report-lcov@v3
        with:
          coverage-files: coverage/lcov.info
          minimum-coverage: 25
          artifact-name: code-coverage-report
          github-token: ${{ secrets.GH_TOKEN }}

  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Install Flutter
        uses: subosito/flutter-action@v2

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK
        run: |
          flutter build apk --release
          mkdir -p build/apk
          mv build/app/outputs/flutter-apk/app-release.apk build/apk/

      - name: Publish APK as artifact
        uses: actions/upload-artifact@v2
        with:
          name: apk
          path: build/apk/app-release.apk

      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: apk
          path: build/apk

      - name: Fetch Latest Release Version
        id: fetch_latest_release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          latest_version=$(gh release view --json tagName -q ".tagName" | sed 's/v//')
          echo "LATEST_VERSION=$latest_version" >> $GITHUB_ENV

      - name: Calculate Next Version
        id: calculate_next_version
        run: |
          IFS='.' read -r major minor <<< "${LATEST_VERSION}"
          next_version="1.$((minor + 1))"
          echo "NEXT_VERSION=$next_version" >> $GITHUB_ENV

      - name: Check if Release Exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if gh release view ${{ env.NEXT_VERSION }}; then
            gh release delete ${{ env.NEXT_VERSION }} -y
          fi
          echo "release_exists=true" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ env.NEXT_VERSION }}
          release_name: Release ${{ env.NEXT_VERSION }}
          body: |
            Release notes for version ${{ env.NEXT_VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/apk/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive
